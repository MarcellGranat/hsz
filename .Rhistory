grid::textGrob(title, x = 0.01, hjust = 0, y = .50,
gp = grid::gpar(fontsize = 10.5, col = "black",
fontfamily = "Calibri", fontface = "bold")))
pieces <- c("subtitle", "title", "caption")
grob <- ggplot2::ggplotGrob(plot_name)
if (is.null(title)) {
title <- knitr::opts_current$get()$cap
}
if (is.null(title)) {
title <- "A cím csak a dokumentum rendelésekor jelenik meg."
}
title <- str_c(.fig_counter, ". ábra\n", str_wrap(title, 80))
.fig_counter <<- .fig_counter + 1
footer <- grid::grobTree(
grid::rectGrob(gp=grid::gpar(fill="#9f9f9e", col = "#9f9f9e"), ),
grid::textGrob(title, x = 0.01, hjust = 0, y = .50,
gp = grid::gpar(fontsize = 10.5, col = "black",
fontfamily = "Calibri", fontface = "bold")))
pieces <- c("subtitle", "title", "caption")
grob <- ggplot2::ggplotGrob(qplot(mpg, wt, data = mtcars))
n <- length(pieces)
grob$layout$l[grob$layout$name %in% pieces] <- 2
plot_left_aligned <- grob
label <- knitr::opts_current$get()$label
if (is.null(label)) {
file_name <- str_c(str_flatten(sample(c(letters, 0:9), 16)), ".png")
} else {
file_name <- str_c(label, ".png")
}
dir.create("figures")
footer
ggpubr::as_ggplot(footer)
patchwork::align_plots(
ggpubr::as_ggplot(footer),
grob
)
patchwork::align_patches(
ggpubr::as_ggplot(footer),
grob
)
ggpubr::as_ggplot(footer)
grob
patchwork::align_patches(
ggpubr::as_ggplot(footer),
qplot(mpg, wt, data = mtcars)
)
ggpubr::as_ggplot(footer)
patchwork::align_patches(
ggpubr::as_ggplot(footer),
qplot(mpg, wt, data = mtcars)
)
library(patchwork)
ggpubr::as_ggplot(footer) +
qplot(mpg, wt, data = mtcars),
ggpubr::as_ggplot(footer) +
qplot(mpg, wt, data = mtcars)
ggpubr::as_ggplot(footer) /
qplot(mpg, wt, data = mtcars)
ggpubr::as_ggplot(footer) /
qplot(mpg, wt, data = mtcars) +
plot_left_aligned
ggpubr::as_ggplot(footer) /
qplot(mpg, wt, data = mtcars) +
plot_layout(heights = (.01, 1))
ggpubr::as_ggplot(footer) /
qplot(mpg, wt, data = mtcars) +
plot_layout(heights = c(.01, 1))
ggpubr::as_ggplot(footer) /
qplot(mpg, wt, data = mtcars) +
plot_layout(heights = c(.05, 1))
ggpubr::as_ggplot(footer) /
qplot(mpg, wt, data = mtcars) +
plot_layout(heights = c(.1, 1))
ggpubr::as_ggplot(footer) /
qplot(mpg, wt, data = mtcars) +
plot_layout(heights = c(.1, 1), tag_level = "new")
ggpubr::as_ggplot(footer) /
qplot(mpg, wt, data = mtcars) +
plot_layout(heights = c(.1, 1), tag_level = "keep")
ggpubr::as_ggplot(footer) /
qplot(mpg, wt, data = mtcars) +
plot_layout(heights = c(.1, 1), )
if (is.null(title)) {
title <- knitr::opts_current$get()$cap
}
if (is.null(title)) {
title <- "A cím csak a dokumentum rendelésekor jelenik meg."
}
title <- str_c(.fig_counter, ". ábra\n", str_wrap(title, 80))
.fig_counter <<- .fig_counter + 1
footer <- grid::grobTree(
grid::rectGrob(gp=grid::gpar(fill="#9f9f9e", col = "#9f9f9e"), ),
grid::textGrob(title, x = 0.01, hjust = 0, y = .50,
gp = grid::gpar(fontsize = 10.5, col = "black",
fontfamily = "Calibri", fontface = "bold")))
pieces <- c("subtitle", "title", "caption")
grob <- ggplot2::ggplotGrob(qplot(mpg, wt, data = mtcars))
n <- length(pieces)
grob$layout$l[grob$layout$name %in% pieces] <- 2
plot_left_aligned <- grob
label <- knitr::opts_current$get()$label
if (is.null(label)) {
file_name <- str_c(str_flatten(sample(c(letters, 0:9), 16)), ".png")
} else {
file_name <- str_c(label, ".png")
}
dir.create("figures")
library(patchwork)
ggpubr::as_ggplot(footer) /
qplot(mpg, wt, data = mtcars) +
plot_layout(heights = c(.1, 1), )
.gg_finalise <- function(plot_name = ggplot2::last_plot(),
title = NULL,
width_pixels = 640,
height_pixels = 450
)  {
if (is.null(title)) {
title <- knitr::opts_current$get()$cap
}
if (is.null(title)) {
title <- "A cím csak a dokumentum rendelésekor jelenik meg."
}
title <- str_c(.fig_counter, ". ábra\n", str_wrap(title, 80))
.fig_counter <<- .fig_counter + 1
footer <- grid::grobTree(
grid::rectGrob(gp=grid::gpar(fill="#9f9f9e", col = "#9f9f9e"), ),
grid::textGrob(title, x = 0.01, hjust = 0, y = .50,
gp = grid::gpar(fontsize = 10.5, col = "black",
fontfamily = "Calibri", fontface = "bold")))
pieces <- c("subtitle", "title", "caption")
grob <- ggplot2::ggplotGrob(plot_name)
n <- length(pieces)
grob$layout$l[grob$layout$name %in% pieces] <- 2
plot_left_aligned <- grob
label <- knitr::opts_current$get()$label
if (is.null(label)) {
file_name <- str_c(str_flatten(sample(c(letters, 0:9), 16)), ".png")
} else {
file_name <- str_c(label, ".png")
}
dir.create("figures")
ggpubr::ggarrange((grid::linesGrob(y = 0)), footer, plot_left_aligned,
ncol = 1,
heights = c(0, 0.15/(height_pixels/450), 1)) |>
ggpubr::ggexport(filename = str_c("figure/", file_name))
cat(str_c("![](figures/", file_name, ")"))
}
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, fill = Species)) +
scale_fill_manual(values = .co(c("red", "blue", "blue2"))) +
labs(
subtitle = "Sepal.Width",
y = NULL,
caption = "Ez csak egy random magyarázat ide.\nForrás: saját szerkesztés."
) -
.gg_finalise
require("magrittr")
# Load data
data("ToothGrowth")
df <- ToothGrowth
df$dose <- as.factor(df$dose)
ggpubr::ggarrange((grid::linesGrob(y = 0)), footer, plot_left_aligned,
ncol = 1,
heights = c(0, 0.15/(height_pixels/450), 1)) |>
ggpubr::ggexport(filename = str_c("figure/", file_name), )
require("magrittr")
# Load data
data("ToothGrowth")
df <- ToothGrowth
df$dose <- as.factor(df$dose)
bxp <- ggboxplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
# Dot plot
dp <- ggdotplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
# Density plot
dens <- ggdensity(df, x = "len", fill = "dose", palette = "jco")
ggarrange(bxp, dp, dens, ncol = 2) %>%
ggexport(filename = "test.pdf")
ggarrange(bxp, dp, dens, ncol = 2) %>%
ggexport(filename = "test.png")
.gg_finalise <- function(plot_name = ggplot2::last_plot(),
title = NULL,
width_pixels = 640,
height_pixels = 450
)  {
if (is.null(title)) {
title <- knitr::opts_current$get()$cap
}
if (is.null(title)) {
title <- "A cím csak a dokumentum rendelésekor jelenik meg."
}
title <- str_c(.fig_counter, ". ábra\n", str_wrap(title, 80))
.fig_counter <<- .fig_counter + 1
footer <- grid::grobTree(
grid::rectGrob(gp=grid::gpar(fill="#9f9f9e", col = "#9f9f9e"), ),
grid::textGrob(title, x = 0.01, hjust = 0, y = .50,
gp = grid::gpar(fontsize = 10.5, col = "black",
fontfamily = "Calibri", fontface = "bold")))
pieces <- c("subtitle", "title", "caption")
grob <- ggplot2::ggplotGrob(plot_name)
n <- length(pieces)
grob$layout$l[grob$layout$name %in% pieces] <- 2
plot_left_aligned <- grob
label <- knitr::opts_current$get()$label
if (is.null(label)) {
file_name <- str_c(str_flatten(sample(c(letters, 0:9), 16)), ".png")
} else {
file_name <- str_c(label, ".png")
}
dir.create("figures")
ggpubr::ggarrange((grid::linesGrob(y = 0)), footer, plot_left_aligned,
ncol = 1,
heights = c(0, 0.15/(height_pixels/450), 1)) |>
ggpubr::ggexport(filename = str_c("figure/", file_name), )
cat(str_c("![](figures/", file_name, ")"))
}
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, fill = Species)) +
scale_fill_manual(values = .co(c("red", "blue", "blue2"))) +
labs(
subtitle = "Sepal.Width",
y = NULL,
caption = "Ez csak egy random magyarázat ide.\nForrás: saját szerkesztés."
) -
.gg_finalise
.gg_finalise <- function(plot_name = ggplot2::last_plot(),
title = NULL,
width_pixels = 640,
height_pixels = 450
)  {
if (is.null(title)) {
title <- knitr::opts_current$get()$cap
}
if (is.null(title)) {
title <- "A cím csak a dokumentum rendelésekor jelenik meg."
}
title <- str_c(.fig_counter, ". ábra\n", str_wrap(title, 80))
.fig_counter <<- .fig_counter + 1
footer <- grid::grobTree(
grid::rectGrob(gp=grid::gpar(fill="#9f9f9e", col = "#9f9f9e"), ),
grid::textGrob(title, x = 0.01, hjust = 0, y = .50,
gp = grid::gpar(fontsize = 10.5, col = "black",
fontfamily = "Calibri", fontface = "bold")))
pieces <- c("subtitle", "title", "caption")
grob <- ggplot2::ggplotGrob(plot_name)
n <- length(pieces)
grob$layout$l[grob$layout$name %in% pieces] <- 2
plot_left_aligned <- grob
label <- knitr::opts_current$get()$label
if (is.null(label)) {
file_name <- str_c(str_flatten(sample(c(letters, 0:9), 16)), ".png")
} else {
file_name <- str_c(label, ".png")
}
dir.create("figures")
ggpubr::ggarrange((grid::linesGrob(y = 0)), footer, plot_left_aligned,
ncol = 1,
heights = c(0, 0.15/(height_pixels/450), 1)) |>
ggpubr::ggexport(filename = str_c("figure/", file_name))
cat(str_c("![](figures/", file_name, ")"))
}
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, fill = Species)) +
scale_fill_manual(values = .co(c("red", "blue", "blue2"))) +
labs(
subtitle = "Sepal.Width",
y = NULL,
caption = "Ez csak egy random magyarázat ide.\nForrás: saját szerkesztés."
) -
.gg_finalise
ggpubr::ggarrange((grid::linesGrob(y = 0)), footer, plot_left_aligned,
ncol = 1,
heights = c(0, 0.15/(height_pixels/450), 1)) |>
ggpubr::ggexport(filename = "test2.png")
.gg_finalise <- function(plot_name = ggplot2::last_plot(),
title = NULL,
width_pixels = 640,
height_pixels = 450
)  {
if (is.null(title)) {
title <- knitr::opts_current$get()$cap
}
if (is.null(title)) {
title <- "A cím csak a dokumentum rendelésekor jelenik meg."
}
title <- str_c(.fig_counter, ". ábra\n", str_wrap(title, 80))
.fig_counter <<- .fig_counter + 1
footer <- grid::grobTree(
grid::rectGrob(gp=grid::gpar(fill="#9f9f9e", col = "#9f9f9e"), ),
grid::textGrob(title, x = 0.01, hjust = 0, y = .50,
gp = grid::gpar(fontsize = 10.5, col = "black",
fontfamily = "Calibri", fontface = "bold")))
pieces <- c("subtitle", "title", "caption")
grob <- ggplot2::ggplotGrob(plot_name)
n <- length(pieces)
grob$layout$l[grob$layout$name %in% pieces] <- 2
plot_left_aligned <- grob
label <- knitr::opts_current$get()$label
if (is.null(label)) {
file_name <- str_c(str_flatten(sample(c(letters, 0:9), 16)), ".png")
} else {
file_name <- str_c(label, ".png")
}
dir.create("figures")
ggpubr::ggarrange((grid::linesGrob(y = 0)), footer, plot_left_aligned,
ncol = 1,
heights = c(0, 0.15/(height_pixels/450), 1)) |>
ggpubr::ggexport(filename = "test2.png")
cat(str_c("![](figures/", file_name, ")"))
}
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, fill = Species)) +
scale_fill_manual(values = .co(c("red", "blue", "blue2"))) +
labs(
subtitle = "Sepal.Width",
y = NULL,
caption = "Ez csak egy random magyarázat ide.\nForrás: saját szerkesztés."
) -
.gg_finalise
.gg_finalise <- function(plot_name = ggplot2::last_plot(),
title = NULL,
width_pixels = 640,
height_pixels = 450
)  {
if (is.null(title)) {
title <- knitr::opts_current$get()$cap
}
if (is.null(title)) {
title <- "A cím csak a dokumentum rendelésekor jelenik meg."
}
title <- str_c(.fig_counter, ". ábra\n", str_wrap(title, 80))
.fig_counter <<- .fig_counter + 1
footer <- grid::grobTree(
grid::rectGrob(gp=grid::gpar(fill="#9f9f9e", col = "#9f9f9e"), ),
grid::textGrob(title, x = 0.01, hjust = 0, y = .50,
gp = grid::gpar(fontsize = 10.5, col = "black",
fontfamily = "Calibri", fontface = "bold")))
pieces <- c("subtitle", "title", "caption")
grob <- ggplot2::ggplotGrob(plot_name)
n <- length(pieces)
grob$layout$l[grob$layout$name %in% pieces] <- 2
plot_left_aligned <- grob
label <- knitr::opts_current$get()$label
if (is.null(label)) {
file_name <- str_c(str_flatten(sample(c(letters, 0:9), 16)), ".png")
} else {
file_name <- str_c(label, ".png")
}
dir.create("figures")
ggpubr::ggarrange((grid::linesGrob(y = 0)), footer, plot_left_aligned,
ncol = 1,
heights = c(0, 0.15/(height_pixels/450), 1)) |>
ggpubr::ggexport(filename = "figures/test2.png")
cat(str_c("![](figures/", file_name, ")"))
}
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, fill = Species)) +
scale_fill_manual(values = .co(c("red", "blue", "blue2"))) +
labs(
subtitle = "Sepal.Width",
y = NULL,
caption = "Ez csak egy random magyarázat ide.\nForrás: saját szerkesztés."
) -
.gg_finalise
knitr::opts_current$get()$`fig-width`
View(`-.gg`)
stop()
stop(domain = "")
stop("", domain = "")
options(show.error.messages=FALSE)
stop(call. = FALSE)
xx <- \() cat("")
xx
expression({})
expression({cat(z)})
x <- expression({cat(z)})
x
return(x)
testthat::skip()
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, fill = Species)) +
scale_fill_manual(values = .co(c("red", "blue", "blue2"))) +
labs(
subtitle = "Sepal.Width",
y = NULL,
caption = "Ez csak egy random magyarázat ide.\nForrás: saját szerkesztés."
) -
.gg_finalise |>
eval()
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, fill = Species)) +
scale_fill_manual(values = .co(c("red", "blue", "blue2"))) +
labs(
subtitle = "Sepal.Width",
y = NULL,
caption = "Ez csak egy random magyarázat ide.\nForrás: saját szerkesztés."
) -
.gg_finalise |>
do.call
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, fill = Species)) +
scale_fill_manual(values = .co(c("red", "blue", "blue2"))) +
labs(
subtitle = "Sepal.Width",
y = NULL,
caption = "Ez csak egy random magyarázat ide.\nForrás: saját szerkesztés."
) -
.gg_finalise |>
do.call()
x %||% y
x
2 %||% 3
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, fill = Species)) +
scale_fill_manual(values = .co(c("red", "blue", "blue2"))) +
labs(
subtitle = "Sepal.Width",
y = NULL,
caption = "Ez csak egy random magyarázat ide.\nForrás: saját szerkesztés."
) -
.gg_finalise %||%
2
here::here("template_fns")
here::here("template_fns.R")
source(here::here("template_fns.R"))
here::here("template_fns.R")
here::i_am()
here::i_am("s")
source(here::here("template_fns.R"))
list.files(recursive = TRUE, full.names = TRUE, pattern = "template_fns.R$")
list.files(recursive = TRUE, full.names = TRUE, pattern = "template_fns.R$") |>
source()
cli::cli_bullets(c(.fig_counter))
cli::cli_bullets(c(".fig_counter"))
library(tidyverse)
list.files(recursive = TRUE, full.names = TRUE, pattern = "template_fns.R$") |>
source()
library(tidyverse)
list.files(recursive = TRUE, full.names = TRUE, pattern = "template_fns.R$") |>
source()
library(tidyverse)
list.files(recursive = TRUE, full.names = TRUE, pattern = "template_fns.R$") |>
source()
cli::cli_h1("Function to edit your template")
cli::cli_h1("Function & objcts to edit your template")
cli::cli_bullets(
c(
"{.fn .fig_counter}"
)
cli::cli_li(
c(
"{.fn .fig_counter}"
)
cli::cli_li(
c(
"{.code .fig_counter}: "
)
cli::cli_li(
c(
"{.code .fig_counter}: # of plot",
"{.code .tbl_counter}: # of tbls"
)
cli::cli_li(
c(
"{.code .fig_counter}: # of plot",
"{.code .tbl_counter}: # of tbls",
"{.fn .gt_finalise}: use it at the end of a gt object with pipe",
"{.code hsz_theme}: ggplot theme for hsz (set as defautl)",
"{.code hsz_theme_w_vertical}: gg th for ps where vertical is meaningful",
)
cli::cli_h1("Function & objcets to edit your template")
cli::cli_li(
c(
"{.code .fig_counter}: # of plot",
"{.code .tbl_counter}: # of tbls",
"{.fn .gt_finalise}: use it at the end of a gt object with pipe",
"{.code hsz_theme}: ggplot theme for hsz (set as defautl)",
"{.code hsz_theme_w_vertical}: gg th for ps where vertical is meaningful",
)
cli::cli_li(
c(
"{.code .fig_counter}: # of plot",
"{.code .tbl_counter}: # of tbls",
"{.fn .gt_finalise}: use it at the end of a gt object with pipe",
"{.code hsz_theme}: ggplot theme for hsz (set as defautl)",
"{.code hsz_theme_w_vertical}: gg th for ps where vertical is meaningful"
)
cli::cli_h1("Function & objcets to edit your template")
cli::cli_li(
c(
"{.code .fig_counter}: # of plot",
"{.code .tbl_counter}: # of tbls",
"{.fn .gt_finalise}: use it at the end of a gt object with pipe",
"{.code hsz_theme}: ggplot theme for hsz (set as defautl)",
"{.code hsz_theme_w_vertical}: gg th for ps where vertical is meaningful",
"{.code .co_pal}: A suggested color vector",
"{.fn .co}: fn to easily access these colors",
"{.fn .gg_finalise}: A fn to add header and others. * Not pipe compatible."
)
cli::cli_h1("Function & objcets to edit your template")
cli::cli_li(
c(
"{.code .fig_counter}: # of plot",
"{.code .tbl_counter}: # of tbls",
"{.fn .gt_finalise}: use it at the end of a gt object with pipe",
"{.code hsz_theme}: ggplot theme for hsz (set as defautl)",
"{.code hsz_theme_w_vertical}: gg th for ps where vertical is meaningful",
"{.code .co_pal}: A suggested color vector",
"{.fn .co}: fn to easily access these colors",
"{.fn .gg_finalise}: A fn to add header and others. ! Not pipe compatible."
)
